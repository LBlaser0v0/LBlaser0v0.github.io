<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小八的Verilog学习笔记</title>
    <link href="/2025/04/28/verilog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/28/verilog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Veriog学习笔记"><a href="#Veriog学习笔记" class="headerlink" title="Veriog学习笔记"></a>Veriog学习笔记</h1><p>module adder(<br>    input [1:0] a,&#x2F;&#x2F;模块内部的输入必须是线网类型。<br>    input [1:0] b,<br>    output [2:0] sum<br>    );<br>endmodule          </p><h2 id="1-Verilog模块"><a href="#1-Verilog模块" class="headerlink" title="1.Verilog模块"></a>1.Verilog模块</h2><p>&#x2F;&#x2F;对于模块的输出。不定义类型时，默认是线网类型，用assign输出。定义output reg [2:0]sum时，是寄存器类型，用过程块（always @（*））输出。<br>&#x2F;&#x2F;数据流的连续赋值（assign）的左值一定是线网类型；（过程块）<br>&#x2F;&#x2F;两者声明默认都是一位标量，表示多为用向量[x;y]进行说明，习惯上用x表示高位，y表示低位，如：[15:0]。<br>&#x2F;&#x2F;当然，也可以用[5,2]这个向量单独引出一个线网或寄存器中的几根线代表的数据，如定义 input [31:0] addr，可以用addr[5:2]引出他的四位数据线。</p><p>&#x2F;&#x2F;在模块外部，输入可以是寄存器，也可以是线网。<br>&#x2F;&#x2F;在模块外部，输出则必须是线网类型。</p><h2 id="2-Verilog符号语句"><a href="#2-Verilog符号语句" class="headerlink" title="2.Verilog符号语句"></a>2.Verilog符号语句</h2><p>&#x2F;&#x2F;$符号后指代的是系统函数，系统函数很多，要用到的不多，如$monitor&#x2F;$display用于显示&#x2F;监视信号值。<br>&#x2F;&#x2F;$monitor是自动循环执行的，不需要写在循环语句中。<br>&#x2F;&#x2F;$time用于显示执行这条语句时的仿真时刻。<br>&#x2F;&#x2F;用法：$display（$time,,”the result is %h”,c） &#x2F;&#x2F;display按照一定规定的时间显示变量的监视值 &#x2F;&#x2F;与c语言的语法很类似，%的格式化输出。<br>&#x2F;&#x2F;或%monitor（$time,,”the result is %h”,c）用monitor输出时，只有监视变量的值发生改变时，才打印监视结果。<br>&#x2F;&#x2F;输出为 0（这里是time函数输出的时间） the result is x(x是c计算的结果)</p><p>&#x2F;&#x2F;$finish 表示仿真结束，类似c语言中的exit（）函数。<br>&#x2F;&#x2F;#是延时符号，延时种类有很多。可以用于仿真现实中的各种操作延时。<br>&#x2F;&#x2F;(&#96;)符号说明一个编译指导，类似于c语言的#符号<br>&#x2F;&#x2F;用法<del>define not_date #1 将not_date定义为一个1ns的延时。<br>&#x2F;&#x2F;而</del>timescale用于说明仿真单位时间以及精度，延时单位基于此，每个仿真程序都必须提前定义。<br>&#x2F;&#x2F;用法~timescale 1ns&#x2F;1ps   要求前面单位比后面的大，如1ns &gt; 1ps</p><h2 id="3-Verilog数据类型"><a href="#3-Verilog数据类型" class="headerlink" title="3.Verilog数据类型"></a>3.Verilog数据类型</h2><p>&#x2F;&#x2F;verilog的三种数据类型：<br>&#x2F;&#x2F;net线网型：相当于导线，表示硬件单元之间的链接，且线网必须由其他部件单元的输出端来连续续驱动，本身不能储存信息，只能传输信息。<br>&#x2F;&#x2F;其数值多少由驱动元决定，没有驱动元则值为高阻态Z。多用于数据流建模的连续赋值。<br>&#x2F;&#x2F;reg寄存器类型：用来表示存储的部件，类似c语言的变量，既可以是标量，也可以是矢量。<br>&#x2F;&#x2F;行为模型中，寄存器的赋值必须在</p><p>&#x2F;&#x2F;寄存器与线网互相链接</p><p>&#x2F;&#x2F;Verilog有预定义的决断函数，有多驱动的流程，但现实中不会存在多驱动的。</p><p>&#x2F;&#x2F;数组与向量<br>&#x2F;&#x2F;数组只能单个访问，且单元内容可以是向量；但向量可以连续访问，但单元内容只能是一位。<br>&#x2F;&#x2F;如定义reg[15:0] data[0:31]表示寄存器长16位向量，共有0-31个这样的寄存器构成一个数组，数组用下表访问。<br>&#x2F;&#x2F;其中0-15表示寄存器的宽度，0-31表示寄存器的深度。      </p><p>&#x2F;&#x2F;数据流建模语法：<br>&#x2F;&#x2F;连续赋值语句，是vierlog的基本语句<br>&#x2F;&#x2F;其左值必须是一个标量或向量线网类型，或者是两者的拼接，不能是向量寄存器<br>&#x2F;&#x2F;例子： assign f&#x3D;a&b; 标量<br>&#x2F;&#x2F;       assign addr[15:0]</p><p>&#x2F;&#x2F;可以在声明变量的同时对他赋值，也可以先声明后附值（和c很像）</p><p>&#x2F;&#x2F;位宽的概念：<br>&#x2F;&#x2F;左值与右值的位宽不同，则自动对右值向量进行扩展缩减来对齐左值位宽。<br>&#x2F;&#x2F;如右值位宽大，则放弃多余高位；若右值位宽比左值小，则对右值进行零扩展（本节课只涉及零扩展，但实际上还有不同扩展方式）到与左值位数相同。<br>&#x2F;&#x2F;注意数据大小不同是的计算的截断或者扩展方式。</p><p>&#x2F;&#x2F;-8’d12&#x2F;4为无符号数       -8’sd12&#x2F;4为有符号数（意思是八位二进制有符号数12，再将该二进制整体右移两位）  区别在与d与sd，加了s就是有符号数。<br>&#x2F;&#x2F;扩展时，添0还是添1，就看第一个二进制1是否是符号位，是符号位就添1，不是则添0。（本节课不存在讨论添1的情况）</p><p>&#x2F;&#x2F;reg 寄存器（默认是无符号数）<br>&#x2F;&#x2F;integer 整数类型（默认是有符号数）<br>&#x2F;&#x2F;若计算中同时有有符号数和无符号数，则先将他们都作为无符号数运算，再进行调整。</p><p>&#x2F;&#x2F;逻辑操作符：<br>&#x2F;&#x2F;~ not非 ；&amp; and与；| or 或；^ xor异或；<br>&#x2F;&#x2F;当单独对a进行逻辑操作时，则对其每一位之间都进行该操作。<br>&#x2F;&#x2F;如&amp;a，当a &#x3D; 4‘d0101，则有&amp;a &#x3D; 0&amp;1&amp;0&amp;1 &#x3D; 0。</p><p>&#x2F;&#x2F;条件操作符语法：实现数据选择器的关键方式，用起来非常频繁，类似if语句。<br>&#x2F;&#x2F;（data&#x3D;1）？data1：data0。与c语言中的三目操作符相同。</p><p>&#x2F;&#x2F;拼接操作{}<br>&#x2F;&#x2F;可以从向量中选择不同位，拼接起来组成一个新向量。<br>&#x2F;&#x2F;且他不限定拼接的位数。</p><p>&#x2F;&#x2F;{{}}复制操作//内部的{}框住要复制的变量。外部的{}框住要复制几次。//如{% raw %}{4{a}}{% endraw %}就是将a这个变量复制四次。 可以这样复制arr[15:0]&#x3D;{% raw %}{{{4a}}{% endraw %},{% raw %}{4{b}}}{% endraw %},当 a &#x3D; 2’d01, b &#x3D; 2’d10 </p><p>&#x2F;&#x2F;initial和always语句<br>&#x2F;&#x2F;两个语句中的过程块都是并发执行的，而不像c语言等其他编程语言一样顺序执行<br>&#x2F;&#x2F;initial过程块只在仿真时使用<br>&#x2F;&#x2F;initial语句中的过程块只执行一次；always内的过程块会循环执行。<br>&#x2F;&#x2F;always语句块从仿真0时刻开始执行，不断电则一直执行。</p><p>&#x2F;&#x2F;三类过程时序控制：<br>&#x2F;&#x2F;1.简单延时（#delay）<br>&#x2F;&#x2F;2.电平触发：@（<signal>），如always @（a or b），如果a和b中有一个发生改变，则触发always语句（只支持or，不支持and）<br>&#x2F;&#x2F;  若只写一个*，即always @（*），那么则会监控module里面的所有数据。<br>&#x2F;&#x2F;3.边沿敏感：       例子always @（posedge a）表示当且仅当a有上升沿的时候才触发always。适合适合实现时序逻辑电路。<br>&#x2F;&#x2F;always中触发的满足条件只能用or来触发，不能实现and的触发。<br>&#x2F;&#x2F;注意：电平触发和边沿敏感不能在同一个过程块中使用，如always @（posedge a or b）是错误的。<br>&#x2F;&#x2F;      过程块中的赋值是过程赋值，过程赋值的左值必须是寄存器类型（先前的连续赋值的左值必须是线网类型）<br>&#x2F;&#x2F;      阻塞赋值（&#x3D;）：按顺序执行，执行完当前再执行语句块内的下一条语句<br>&#x2F;&#x2F;      非阻塞赋值（&lt;&#x3D;）：并发执行，不会阻塞位于同一过程块中的后续语句的执行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码/verilog语法/学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小八的python学习笔记————基础部分</title>
    <link href="/2025/04/22/pythonlearn/"/>
    <url>/2025/04/22/pythonlearn/</url>
    
    <content type="html"><![CDATA[<h1 id="Python学习记录————基础版"><a href="#Python学习记录————基础版" class="headerlink" title="Python学习记录————基础版"></a>Python学习记录————基础版</h1><h2 id="一、python中出现错误原因"><a href="#一、python中出现错误原因" class="headerlink" title="一、python中出现错误原因"></a>一、python中出现错误原因</h2><h3 id="1-输入错误"><a href="#1-输入错误" class="headerlink" title="1.输入错误"></a>1.输入错误</h3><p>print（”123“）#报错，中文引号<br>#注意：python中的符号都是要用英文模式下的</p><h3 id="2-缩进错误"><a href="#2-缩进错误" class="headerlink" title="2.缩进错误"></a>2.缩进错误</h3><p>print(123)<br>#注意:print要顶格写，否则就报错</p><h3 id="3-语法错误"><a href="#3-语法错误" class="headerlink" title="3.语法错误"></a>3.语法错误</h3><p>print(123)print (456)<br>#两个print不能写在同一行，一个print必须单独写一行，错误信息中遇到Syntax说明语法有问题</p><h3 id="4-命名错误"><a href="#4-命名错误" class="headerlink" title="4.命名错误"></a>4.命名错误</h3><p>print(SixStar)#错误原因：SixStar是字母，那么就是字符串，必须要加上引号，单引号或者双引号都可以。或者Sixstar作为变量名，那么会输出变量值。</p><h2 id="二、python调试方法"><a href="#二、python调试方法" class="headerlink" title="二、python调试方法"></a>二、python调试方法</h2><h3 id="1-debug的调试"><a href="#1-debug的调试" class="headerlink" title="1.debug的调试"></a>1.debug的调试</h3><p>&#x2F;# debug中代码为蓝色时表示是即将要运行的代表<br>&#x2F;# Show Execution Point显示执行的断点<br>&#x2F;# Step Into下一步<br>&#x2F;# Run to Cursor跳到下一个断点的位置<br>&#x2F;# 总结：可以通过debug调试看到程序执行的顺序</p><h2 id="三、python变量"><a href="#三、python变量" class="headerlink" title="三、python变量"></a>三、python变量</h2><h3 id="1-变量的作用"><a href="#1-变量的作用" class="headerlink" title="1.变量的作用"></a>1.变量的作用</h3><p>#计算机中的存储空间，用于保存数据</p><h3 id="2-定义变量的格式"><a href="#2-定义变量的格式" class="headerlink" title="2.定义变量的格式"></a>2.定义变量的格式</h3><p>#变量名 &#x3D; 值<br>#注意：’&#x3D;’ 是赋值运算符，左右两边打上空格是为了代码的规范性，美观性。</p><h4 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h4><p>num1 &#x3D; 3 #numl就是一个变量，保存可乐的价格<br>num2 &#x3D; 10#num2也是一个变量，保存冰淇淋的价格<br>total &#x3D; num1 + num2#total也是一个变量，保存总价格<br>print (num1) #若num1未赋值，则会报错，提示未定义的变量<br>print (total) #输出结果：13<br>#加上引号会打印引号里面的内容，没有引号就会被识别成变量名，打印的是变量的值，如果该变量没有被赋值，就会报命名错误<br>#变量只有再赋值以后才会被创建，所以使用变量之前必须要赋值</p><h3 id="3-变量的命名规则"><a href="#3-变量的命名规则" class="headerlink" title="3.变量的命名规则"></a>3.变量的命名规则</h3><p>#变量名只能包含字母、数字和下划线，且不能以数字开头,严格区分大小写。<br>#变量名不能与关键字、系统保留字冲突<br>#变量名的长度没有限制，但最好不要超过20个字符，因为屏幕显示不下。<br>#Python中，变量没有类型，变量可以保存任意类型的数据。<br>#加上引号会打印引号里面的内容，没有引号就会被识别成变量名，打印的是变量的值，如果该变量没有被赋值，就会报命名错误。<br>#变量只有再赋值以后才会被创建，所以使用变量之前必须要赋值<br>#Python3可以用中文命名，但是不推荐，不符合代码的规范性<br>(username) &#x3D; 1<br>print ((username))#标识符被包含在()内对标识符本身没有影响</p><h3 id="4-变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）"><a href="#4-变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）" class="headerlink" title="4.变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）"></a>4.变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）</h3><h4 id="1-见名知义"><a href="#1-见名知义" class="headerlink" title="1.见名知义"></a>1.见名知义</h4><p>#name &#x3D;”bingbing”</p><h4 id="2-下划线分割法：-python常用变量名命名规则"><a href="#2-下划线分割法：-python常用变量名命名规则" class="headerlink" title="2.下划线分割法：(python常用变量名命名规则)"></a>2.下划线分割法：(python常用变量名命名规则)</h4><p>#多个单词组成的名称，使用小写字母，单词与单词之间使用下划线分开。<br>#user_name &#x3D; ‘bingbing’</p><h4 id="3-大驼峰命名法："><a href="#3-大驼峰命名法：" class="headerlink" title="3.大驼峰命名法："></a>3.大驼峰命名法：</h4><p>#多个单词组成的名称，每个单词的首字母大写，其余字母小写。<br>#UserName &#x3D; “冰冰”<br>#SixStar &#x3D; 666</p><h4 id="4-小驼峰命名法："><a href="#4-小驼峰命名法：" class="headerlink" title="4.小驼峰命名法："></a>4.小驼峰命名法：</h4><p>#第一个单词首字母小写，后面单词首字母大写，其余字母小写。<br>#userName &#x3D; “bingbing”<br>#sixStar &#x3D; 666</p><h4 id="5-常量命名法："><a href="#5-常量命名法：" class="headerlink" title="5.常量命名法："></a>5.常量命名法：</h4><p>#全部字母大写，用下划线分割单词。<br>#PI &#x3D; 3.141592653589793</p><h2 id="四、python数据类型"><a href="#四、python数据类型" class="headerlink" title="四、python数据类型"></a>四、python数据类型</h2><h3 id="1-整型：int-（最常用）"><a href="#1-整型：int-（最常用）" class="headerlink" title="1.整型：int （最常用）"></a>1.整型：int （最常用）</h3><p>#整数类型，用于存储整数数据，包括正整数、负整数、0。</p><h3 id="2-浮点数类型：float"><a href="#2-浮点数类型：float" class="headerlink" title="2.浮点数类型：float"></a>2.浮点数类型：float</h3><p>#浮点数类型，用于存储小数数据，包括正数、负数、0、无限大。</p><h3 id="3-布尔类型：bool-（重要）通常用于判断"><a href="#3-布尔类型：bool-（重要）通常用于判断" class="headerlink" title="3.布尔类型：bool （重要）通常用于判断"></a>3.布尔类型：bool （重要）通常用于判断</h3><p>#布尔类型，一种真假的逻辑类型，有固定写法，不能随意赋值，用于存储布尔值，包括True、False（严格区分大小写）。<br>#布尔型可以当作整数对待，True&#x3D;1，False&#x3D;0。<br>#print (True + False)#1+0&#x3D;1<br>#print (True + 1)    #1+1&#x3D;2   </p><h3 id="4-复数类型：complex-（了解即可）"><a href="#4-复数类型：complex-（了解即可）" class="headerlink" title="4.复数类型：complex （了解即可）"></a>4.复数类型：complex （了解即可）</h3><p>#复数类型，用于存储复数数据，包括实数部分和虚数部分。<br>#拥有固定写法，z &#x3D; a + bj，其中a和b是实数部分，j是虚数单位（该单位只能是j，不能用其他字符）。<br>#print (type(2+3j))<br>#ma &#x3D;1+2i<br>#print(ma) #会报错，不能用其他字符做虚数单位<br>#ma1&#x3D;1+2j<br>#ma2&#x3D;2+3j<br>#print(ma1+ma2) #(1+2j)+(2+3j)&#x3D;3+5j</p><h3 id="5-字符串类型：str-比较常用"><a href="#5-字符串类型：str-比较常用" class="headerlink" title="5.字符串类型：str (比较常用)"></a>5.字符串类型：str (比较常用)</h3><h4 id="5-1特点"><a href="#5-1特点" class="headerlink" title="5.1特点"></a>5.1特点</h4><p>#需要加上引号，单引号和双引号都可以，包含了多行内容的时候也可以使用三引号<br>name &#x3D; sixstar #报错，没有引号识别成变量名，sixstar没有被赋值<br>name &#x3D; sixstar<br>name &#x3D; ‘sixstar’<br>name &#x3D; “sixstar”<br>name &#x3D; “””sixstar<br>哈哈”””         #要注意与三引号的多行注释区分开来（没有变量名），前者会被执行，后者不会被执行。</p><h4 id="5-2占位符"><a href="#5-2占位符" class="headerlink" title="5.2占位符"></a>5.2占位符</h4><p>#占位符的作用是生成一定格式的字符串，仅仅占据着该位置，但不会输出。<br>#占位符的三种方式：<br>1.%    （类似c语言的printf函数中的%d-&gt;整型、%f-&gt;浮点型、%s-&gt;字符串等）<br>用法举例：<br>name &#x3D;’bingbing’<br>print(“我的名字：%s” % name)<br>#注意：占位符只是占据位置，并不会被输出。</p><p>#%d整数（常用）<br>age &#x3D; 18<br>name&#x3D;’bingbing<br>print(“我的名字:%s，年龄：%d”%(name,age))<br>%d或%f可以用数字设置位数，不足前面补空白。<br>a&#x3D; 123<br>print(“%5d” % a) #表示输出的整数显示位数为5，不足的话用空格补全，超出当前位数则原样输出。<br>print(“%06d” % a)）#表示输出的整数显示位数，不足的话用0补全，超出当前位数则原样输出。</p><p>#%f浮点数（常用）<br>a &#x3D;1.2345673<br>print(“%f” % a)<br>#float型默认后6位小数，如果超出6位则遵循四舍五入原则。<br>print(“%.4f” % a) #表示输出的浮点数显示为4位小数，不足的话用0补全，超出当前位数则四舍五入。 </p><p>#%%<br>print(“我是%%的%%” % ()) #输出为：我是%的%</p><p>2.格式化f<br>#格式：f”{表达式}<br>name &#x3D; bingbing<br>age &#x3D; 18<br>print(f”我的名字是{name}，我今年{age}岁了”) #类似于f{x}类型的函数调用，将name和age看作为了变量。</p><h4 id="5-3占位符表"><a href="#5-3占位符表" class="headerlink" title="5.3占位符表"></a>5.3占位符表</h4><p>%c 格式化字符及其ASCII码<br>%s 格式化字符串<br>%d 格式化整数<br>%u 格式化无符号整型<br>%o 格式化无符号八进制数<br>%x 格式化无符号十六进制数<br>%X 格式化无符号十六进制数（大写）<br>%f 格式化浮点数字，可指定小数点后的精度<br>%e 用科学计数法格式化浮点数<br>%E 作用同%e，用科学计数法格式化浮点数<br>%g %f和%e的简写<br>%G %F和%E的简写<br>%p 用十六进制数格式化变量的地址</p><p>2.format ()<br>3.格式化f<br>#5.3f格式化<br>#格式：f”{表达式}<br>name &#x3D; bingbing<br>age &#x3D; 18<br>print(f”我的名字是{name}，我今年{age}岁了”)</p><p>#5.列表类型：list<br>#7.元组类型：tuple<br>#8.字典类型：dict<br>#9.集合类型：set<br>#10.None类型：None<br>#11.对象类型：object<br>#12.函数类型：function<br>#检测数据类型的方法：运用type()函数，print(type(num))。</p><h2 id="五、python运算符"><a href="#五、python运算符" class="headerlink" title="五、python运算符"></a>五、python运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h3><p> （1）+ 加法<br> （2）- 减法<br> （3）* 乘法<br> （4）&#x2F; 除法<br> 结果一定是浮点数，且除数不能为0。<br> （5）&#x2F;&#x2F; 整除<br> （6）% 取余（取模）<br> （7）** 幂运算</p><h4 id="（8）-注意："><a href="#（8）-注意：" class="headerlink" title="（8）. 注意："></a>（8）. 注意：</h4><p> 1）除法运算结果是浮点数，整数除法结果是整数。<br> 2）整除运算符（&#x2F;&#x2F;）的结果是商的整数部分，即向下取整。<br> 3）取余运算符（%）的结果是整数，即余数。<br> 4）幂运算符（<strong>）的优先级比加减乘除高，所以2+3</strong>2等于11，而(2+3)**2等于25。<br> 5）使用算术运算符，若有浮点数参与运算，则结果也是浮点数。<br> 6）优先级排序: 幂(最高优先级)&gt;乘、除、取余、取整除&gt;加减。</p><h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h3><p> 将一个变量或常量的值赋给另一个变量。<br> （1）&#x3D; 赋值运算符，将右边的值赋给左边的变量。<br> （2）+&#x3D; 增量赋值运算符，将右边的值加到左边的变量上。<br> （3）-&#x3D; 减量赋值运算符，将右边的值减到左边的变量上。<br> （4）*&#x3D; 乘量赋值运算符，将右边的值乘到左边的变量上。<br> （5）&#x2F;&#x3D; 除量赋值运算符，将右边的值除到左边的变量上。<br> （6）%&#x3D; 取余量赋值运算符，将右边的值取余到左边的变量上。<br> （7）**&#x3D; 幂量赋值运算符，将右边的值幂到左边的变量上。</p><h4 id="（8）-注意：-1"><a href="#（8）-注意：-1" class="headerlink" title="（8）. 注意："></a>（8）. 注意：</h4><p> 1）赋值运算符的优先级最低，其次是条件运算符（if、while、for等）。<br> 2）+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、**&#x3D;的优先级比&#x3D;高，所以a&#x3D;b+&#x3D;c等于a&#x3D;b+c。</p><h3 id="3-三目运算符（三元表达式）"><a href="#3-三目运算符（三元表达式）" class="headerlink" title="3.三目运算符（三元表达式）"></a>3.三目运算符（三元表达式）</h3><p> （1）基本格式：为真结果if判断条件else为假结果<br>  if a&lt;&#x3D;b:<br>      print(“a小于等于b”)#为真结果<br>  else:<br>      print (“a比b大”)#为假结果<br>  等于下面三目运算语句：print(“a小于等于b”）if a&lt;&#x3D;b else print(“a比b大”)</p><h3 id="4-转义字符"><a href="#4-转义字符" class="headerlink" title="4.转义字符"></a>4.转义字符</h3><p> （1）\t 制表符 通常表示空四个字符，也称缩进（Tab）。<br> （2）\n 换行符 通常表示换行，将当前位置移到下一行开头。<br> （3）\r 回车符 通常表示回车，将当前位置移到本行开头。<br> （4）\b 退格符 通常表示退格，删除当前位置的字符。<br> （5）\f 换页符 通常表示换页，将当前位置移到下一页开头。<br> （6）\ 反斜杠 通常表示一个普通的斜杠，根据有几个斜杠决定是否转义。<br>  print(r’sixs\\tar’)#r原生字符串，默认取消转义</p><h2 id="六、python流程控制语句（函数）"><a href="#六、python流程控制语句（函数）" class="headerlink" title="六、python流程控制语句（函数）"></a>六、python流程控制语句（函数）</h2><h3 id="1-input-函数"><a href="#1-input-函数" class="headerlink" title="1.input()函数"></a>1.input()函数</h3><p> 用于接收用户输入，并将其转换为字符串类型。<br> 语法：input([prompt])，prompt是提示的意思，会在控制台中显示。<br> 举例：name &#x3D; input(“请输入你的名字：”) #输入”bingbing”，name变量的值为”bingbing”。<br> print (name) #输出”bingbing”。</p><h3 id="2-if语句"><a href="#2-if语句" class="headerlink" title="2.if语句"></a>2.if语句</h3><p> （1）语句解释：用于条件判断，根据条件是否成立，执行相应的语句。<br> （2）语法：与c语言不同，条件语句无括号，但要加冒号（：）<br> if 条件表达式:<br>    语句块1<br> elif 条件表达式:<br>    语句块2<br> else:<br>    语句块3<br> 注意：if语句至少要有一个条件表达式，可以有多个elif条件表达式，也可以有else语句块。<br> 举例：age &#x3D; int(input(“请输入你的年龄：”))<br> if age &lt; 18: #年龄小于18岁<br>    print(“你还未成年，不能参加活动”)<br> elif age &gt;&#x3D; 18 and age &lt; 60: #年龄大于等于18岁小于60岁<br>    print(“你已满18岁，可以参加活动”)<br> else: #年龄大于等于60岁<br>    print(“你已满60岁，可以参加活动”)</p><p>（3）缩进方式：不建议手动空格缩进，使用Tab键或者上一行回车缩进。<br>（4）&#x3D;&#x3D;，！&#x3D;，&lt;，&lt;&#x3D;，&gt;，&gt;&#x3D; 用于比较两个值是否相等、不等、小于、小于等于、大于、大于等于。<br>    and，or，not 用于逻辑运算，and表示两个条件都成立为真，or表示两个条件有一个成立就为真，not表示取反。<br>    pass 空语句，用于占位，表示什么都不做。pass语句可以用在if、while、for等语句块中，表示什么都不做。<br>（5）if循环嵌套：可以将if语句嵌套在另一个if语句中，实现多重条件判断。<br>   他是根据语句的缩进来决定内层和外层的。</p><h3 id="3-while语句"><a href="#3-while语句" class="headerlink" title="3.while语句"></a>3.while语句</h3><p>（1）语句解释：用于循环，当条件表达式成立时，循环执行语句块。<br>（2）基本语法：<br> 定义初始变量<br> while 条件表达式:<br>     循环语句块<br>     条件表达式的变量改变（这是避免死循环的关键）<br>（3）死循环的基本格式<br> while True（任何为真，且不会改变的条件表达式都可以）:<br>     循环语句块<br> 注意：while语句至少要有一个条件表达式，否则会导致死循环。<br>（4）while循环嵌套：可以将while语句嵌套在另一个while语句中，实现多重循环。<br>   它也是根据语句的缩进来决定内层和外层的。但是要注意时间复杂度，避免无限循环。<br>   基本格式：<br>   while 条件1:<br>      循环体1<br>      while 条件2:<br>         循环体2<br>         改变变量2<br>      改变变量1<br>   注意：缩进决定层级，严格控制缩进，最好自动缩进<br>例子： i &#x3D;1# 定义一个变量记录外循环的次数<br>      while i&lt;&#x3D; 3:#外循环<br>         print(f”这是第{i}次外循环”)<br>         j&#x3D;1# 定义一个初始值记录内循环的次数<br>         while j&lt;&#x3D; 5: #内循环<br>            print(f”内循环{j}次”)<br>            j +&#x3D; 1<br>         i +&#x3D; 1</p><h3 id="4-for语句"><a href="#4-for语句" class="headerlink" title="4.for语句"></a>4.for语句</h3><p>（1）语句解释：用于循环，将一个序列中的每个元素依次赋值给一个变量，并执行语句块。<br>（2）基本语法：<br>   #for 临时变量 in 可迭代对象:       #循环体 #注意冒号和缩进<br>   str &#x3D; ‘hellopython’  #定义一个字符串<br>   #可迭代对象就是要去遍历取值的整体，现在的话只需要记住字符串就是可迭代对象<br>   for i in str：#i是临时变量，可以随便写，i是常规写法<br>      print (i)<br>（3）range ()函数：<br>#用来记录循环次数，相当于一个计数器<br>#range（里面只写一个数，这个数就是循环的次数，默认从o开始<br>#写两个数，前面的数字代表开始位置，后面的数字代表结束位置<br>range(start,stop,step)<br>      start：起始值，默认从0开始<br>      stop：结束值，不包含该值<br>      step：步长，默认为1，表示每次循环加1<br>举例：<br>for循环应用：计算1+2+3+…+100的值<br>      s &#x3D;0#定义一个变量来保存计算结果<br>      for i in range（1,101）：#包前不包后，不包含101这个数，从1-100<br>         print(i)<br>         s +&#x3D;i# 每循环一次计算结果与i进行相加<br>      print（”计算结果：”s)</p><h4 id="相比之下for循环比while循环更简便灵活，也更常见。"><a href="#相比之下for循环比while循环更简便灵活，也更常见。" class="headerlink" title="相比之下for循环比while循环更简便灵活，也更常见。"></a>相比之下for循环比while循环更简便灵活，也更常见。</h4><h3 id="5-break和continue语句"><a href="#5-break和continue语句" class="headerlink" title="5.break和continue语句"></a>5.break和continue语句</h3><p>（1）break语句：用于跳出当前循环，直接执行下面的语句。<br>（2）continue语句：用于跳过当前循环，直接进入下一次循环。<br>（3）#都是专门在循环中使用的关键字<br>      if i&lt;&#x3D;5:<br>         print（”我在吃苹果”）<br>         break<br>      #报错，break和continue只能放在循环内<br>（4）注意：在continue之前，一定要修改计数器，否则会陷入死循环<br>   如：i&#x3D;1<br>       while i &lt;&#x3D; 5:<br>          print(f”小明在吃第{i}个苹果”)<br>          if i &#x3D;&#x3D;3:<br>             print(f”吃到了一条大虫子，第{i}个苹果不吃了”)<br>             #在continue之前，一定要修改计数器，否则会陷入死循环<br>             continue<br>          i +&#x3D; 1</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码/python/学习记录/基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小八的python学习笔记————第二篇</title>
    <link href="/2025/04/22/pythonlearn2/"/>
    <url>/2025/04/22/pythonlearn2/</url>
    
    <content type="html"><![CDATA[<h1 id="Python学习记录————进阶版"><a href="#Python学习记录————进阶版" class="headerlink" title="Python学习记录————进阶版"></a>Python学习记录————进阶版</h1><h2 id="一、字符串、列表、元组、字典的定义与操作"><a href="#一、字符串、列表、元组、字典的定义与操作" class="headerlink" title="一、字符串、列表、元组、字典的定义与操作"></a>一、字符串、列表、元组、字典的定义与操作</h2><h3 id="1-字符串编码方式"><a href="#1-字符串编码方式" class="headerlink" title="1.字符串编码方式"></a>1.字符串编码方式</h3><p>本质上就是二进制数据与语言文字的一一对应关系</p><h4 id="1-1Unicode：所有字符都是2个字节，集大成者-Unicode-字符集，它将世界上所有的符号都纳入其中，成功实现了每个数字代表唯一的至少在某种语言中使用的符号。Unicode-依然兼容-ASCII，即-0～127-意义依然不变。"><a href="#1-1Unicode：所有字符都是2个字节，集大成者-Unicode-字符集，它将世界上所有的符号都纳入其中，成功实现了每个数字代表唯一的至少在某种语言中使用的符号。Unicode-依然兼容-ASCII，即-0～127-意义依然不变。" class="headerlink" title="1.1Unicode：所有字符都是2个字节，集大成者 Unicode 字符集，它将世界上所有的符号都纳入其中，成功实现了每个数字代表唯一的至少在某种语言中使用的符号。Unicode 依然兼容 ASCII，即 0～127 意义依然不变。"></a>1.1Unicode：所有字符都是2个字节，集大成者 Unicode 字符集，它将世界上所有的符号都纳入其中，成功实现了每个数字代表唯一的至少在某种语言中使用的符号。Unicode 依然兼容 ASCII，即 0～127 意义依然不变。</h4><pre><code class="hljs">#好处：字符与数字之间转换速度更快一些#坏处：占用空间大</code></pre><h4 id="1-2UTF-8：精准，对不同的字符用不同的长度表示"><a href="#1-2UTF-8：精准，对不同的字符用不同的长度表示" class="headerlink" title="1.2UTF-8：精准，对不同的字符用不同的长度表示"></a>1.2UTF-8：精准，对不同的字符用不同的长度表示</h4><pre><code class="hljs">#优点：节省空间#缺点：字符与数字的转换速度较慢，每次都需要计算字符要用多少个字节来表示。</code></pre><h4 id="1-3GBK2312：简体中文编码表，中文专有字符集编码表。"><a href="#1-3GBK2312：简体中文编码表，中文专有字符集编码表。" class="headerlink" title="1.3GBK2312：简体中文编码表，中文专有字符集编码表。"></a>1.3GBK2312：简体中文编码表，中文专有字符集编码表。</h4><pre><code class="hljs">#优点：兼容 ASCII，兼容 Unicode#缺点：占用空间大，中文字符集不够丰富。</code></pre><h4 id="1-4字符串编码转换"><a href="#1-4字符串编码转换" class="headerlink" title="1.4字符串编码转换"></a>1.4字符串编码转换</h4><pre><code class="hljs">#a=&#39;hello”#print(a,(typea))#str，字符串是以字符为单位进行处理#al = a.encode()#编码#print(&quot;编码后:&quot;,al)# print(type(a1))#bytes，以字节为单位进行处理的#a2=a1. decode()#解码#print(a2, type(a2))#注意：对于bytes，只需要直到它跟字符串类型之间的互相转换例子：st =&quot;这里是六星教育”Ist1 = st.encode(&quot;utf-8&quot;)print(st1,type(st1))st2 = st1.decode(&quot;utf-8&quot;)print(st2,type(st2))输出为：b&#39;\xe8\xbf\x99\xe9\x87\x8c\xe6\x98\xaf\xe5\x85\xad\xe6\x98\x9f\xe6\x95\x99\xe8\    x82\xb2&#39;&lt;c1assbytes&#39;&gt;这里是六星教育&lt;class&#39;str&#39;&gt;</code></pre><h3 id="2-字符串常见操作"><a href="#2-字符串常见操作" class="headerlink" title="2.字符串常见操作"></a>2.字符串常见操作</h3><h4 id="2-1字符串运算符"><a href="#2-1字符串运算符" class="headerlink" title="2.1字符串运算符"></a>2.1字符串运算符</h4><pre><code class="hljs">#1. +字符串拼接#print（10+10）#20,整型相加，+是算数运算符print（&quot;10&quot;+”10&#39;）#1010,字符串相加，+是字符串拼接name1=&quot;六星”name2=&quot;教育&quot;print(namel + name2)print(namel , name2, sep=&quot;&quot;)#sep替换逗号为空，输出为六星教育，否则默认空一格。#2. *用于重复输出print（&quot;好好学习，天天向上\n&quot;*5）#在这里面用sep，是在重复打印后才替换。#注意：需要输出多少次*后面就写多少print(&amp;\t&#39;*10)#\t是制表符，相当于Tab键，输出10个。</code></pre><h4 id="2-2成员运算符"><a href="#2-2成员运算符" class="headerlink" title="2.2成员运算符"></a>2.2成员运算符</h4><pre><code class="hljs">作用：用于检查字符串是否包含某一子串。（可以为多个字符，但是作为一个整体去找，不能分隔）#1. in 用于判断字符串是否包含某一子串#2. not in 用于判断字符串是否不包含某一子串#3. 字符串的成员运算符可以与if语句结合使用，实现条件判断。#例子1：str1 = &quot;hello world&quot;if &quot;world&quot; in str1:    print(&quot;包含&quot;)else:    print(&quot;不包含&quot;)#例子2：name =&#39;bingbingprint(b’ in name)   # Trueprint(a’in name)    # Falseprint(b’not in name)# Falseprint(a’not in name)# True</code></pre><h4 id="2-3字符串的下标"><a href="#2-3字符串的下标" class="headerlink" title="2.3字符串的下标"></a>2.3字符串的下标</h4><pre><code class="hljs">#Python中下标从0开始，从左往右数。#如果从右往左数，则下标从-1开始。#与c语言中的数组很像，可以直接通过下标访问元素。#作用：通过下标能够快速找到对应的数据格式：字符串名[下标值]name =&#39;sixstar&#39;#从左往右数，下标从0开始print(name[0])  #sprint(name[1])  #iprint(name[2])  #xprint(name[-1]) #rprint(name[-2]) #aprint(name[-3]) #t</code></pre><h4 id="2-4字符串的切片"><a href="#2-4字符串的切片" class="headerlink" title="2.4字符串的切片"></a>2.4字符串的切片</h4><pre><code class="hljs">#含义：指对操作的对象截取其中一部分的操作#语法：[开始位置：结束位置：步长],步长默认为1#包前不包后：即从起始位置开始，到结束位置的前一位结束（不包含结束位置本身），与if判断中的range()函数很像。例子：st=&#39;abcdefg&#39;print(st[1:4])  #bcd，不包含第四位。print(st[1:4:2])#bd，步长为2，从1开始，到4结束，步长为2。print(st[::2])  #aceg，步长为2，从0开始，到最后一个结束，步长为2。print(st[::-1]) #gfedcba，步长为-1，从最后一个开始，到第一个结束，步长为-1。上面这个实现了字符串的逆序。print(st[3:])   #defg，结束位置省略，则从第四位开始，到最后一个结束。print(st[:5])   #abcde，开始位置省略，则从第一个开始，到第五位结束(不包含下标5)。#步长：表示选取间隔，不写步长，则默认是1#步长的绝对值大小决定切取的间隔，正负号决定切取方向。#正数表示从左往右取值，负数表示从右往左取值</code></pre><h4 id="2-5字符串的查找"><a href="#2-5字符串的查找" class="headerlink" title="2.5字符串的查找"></a>2.5字符串的查找</h4><h5 id="（1）find-方法："><a href="#（1）find-方法：" class="headerlink" title="（1）find()方法："></a>（1）find()方法：</h5><pre><code class="hljs">#作用：检测某个子字符串是否包含在字符串中，如果在就返回这个子字符串开始位置的下标，否则就返回-1#函数格式：find(子字符串，开始位置下标，结束位置下标)，包前不包后#注意：开始和结束位置下标可以省略，表示在整个字符串中查找name = &#39;bingbing&#39;单个字符：直接查找下标print (name. find(&#39;i&#39;))#1--第一个i的下标为1。多个字符：以第一个字符在字符串中的位置为开始位置，输出第一个字符的下标。print(name.find(&#39;bing&#39;))#0--检测到第一个bing,b的下标为0。print(name.find(&#39;ing&#39;,3,7))#表示在下标为3到下标为6（不包含7）之间查找ing，找到了，返回ing的下标。</code></pre><h5 id="（2）index-方法："><a href="#（2）index-方法：" class="headerlink" title="（2）index()方法："></a>（2）index()方法：</h5><pre><code class="hljs">#作用：查找子串的位置，如果没有找到，则报错（与find函数的区别就在这）。#函数格式：index(子字符串，开始位置下标，结束位置下标)#与find函数一样。#同样包前不包后。#rfind()方法：查找子串的位置，从右边开始查找，如果没有找到，则返回-1#rindex()方法：查找子串的位置，从右边开始查找，如果没有找到，则报错#例子：str1 = &quot;hello world&quot;print(str1.find(&quot;l&quot;))   #2print(str1.index(&quot;l&quot;))  #2print(str1.rfind(&quot;l&quot;))  #9print(str1.rindex(&quot;l&quot;)) #9print(str1.find(&quot;z&quot;))   #-1print(str1.index(&quot;z&quot;))  #ValueError: substring not foundprint(str1.rfind(&quot;z&quot;))  #-1print(str1.rindex(&quot;z&quot;)) #ValueError: substring not found</code></pre><h5 id="（3）count-方法："><a href="#（3）count-方法：" class="headerlink" title="（3）count()方法："></a>（3）count()方法：</h5><pre><code class="hljs">#作用：统计某个子串在字符串中出现的次数，没有出现则返回0。#函数格式：count(子字符串，开始位置下标，结束位置下标)#与find函数一样。#注意：开始和结束位置下标可以省略，表示在整个字符串中查找name=&#39;bingbing&#39;print (name. count (&#39; b&#39;))   #2print (name. count ( a&#39;))    #0print (name. count ( b&#39;,1))  #1print (name. count ( b’1,3)) #0print（name.count（b”，1,4））#0--同样遵循包前不包后规则</code></pre><h4 id="2-6字符串的替换"><a href="#2-6字符串的替换" class="headerlink" title="2.6字符串的替换"></a>2.6字符串的替换</h4><h5 id="（1）replace-方法："><a href="#（1）replace-方法：" class="headerlink" title="（1）replace()方法："></a>（1）replace()方法：</h5><pre><code class="hljs">#作用：将字符串中的子串替换成另一个子串#函数格式：replace(旧子串，新子串，替换次数)#注意：替换次数可以省略，默认全部替换。#例子：持name = &#39;好好学习，天天向上&#39;#print(name.replace(&quot;天&quot;,&#39;时&#39;))   #好好学习，时时向上#print(name.replace(&quot;天&quot;,&#39;时&#39;,1)) #好好学习，时天向上</code></pre><h5 id="（2）split-方法："><a href="#（2）split-方法：" class="headerlink" title="（2）split()方法："></a>（2）split()方法：</h5><pre><code class="hljs">#作用：将字符串按照某个字符分割成多个子串，返回一个列表。#函数格式：split(分隔符，最大分割次数)#注意：分隔符可以省略，默认为空格。#最大分割次数可以省略，默认全部分割。# st = &#39;hello, python&#39;# print(st. split(&#39;,&#39;))     #[&#39;hello’，‘python&#39;]，   --以列表的形式返回# 如果字符串中不包含分割内容，就不进行分割，会作为一个整体# print(st. split(&#39;a&#39;))      #[&#39; hello, python&#39; ]# print(st. split(&#39;o&#39;))     # [&#39;hell&#39;,′,pyth&#39;,&#39;n&#39;]# print(st. split(&#39;o&#39;,1))    #[&#39;hell’，’,python&#39;]  --指定只分割一次</code></pre><h5 id="（3）三种大小写字符转换"><a href="#（3）三种大小写字符转换" class="headerlink" title="（3）三种大小写字符转换"></a>（3）三种大小写字符转换</h5><pre><code class="hljs">#1.capitalize()：第一个字符大写，其他都小写# st = &#39;bingBing&#39;# print(st. capitalize())  #Bingbing#2.1ower()：大写字母转为小写# st =&#39;bIngBinG&#39;# print (st. lower())      #bingbing#3.upper()：小写字母转为大写# st =&#39;bIngBinG&#39;# print(st.upper())        #BINGBING</code></pre><h4 id="2-7字符串的判断"><a href="#2-7字符串的判断" class="headerlink" title="2.7字符串的判断"></a>2.7字符串的判断</h4><h5 id="（1）startswith-方法："><a href="#（1）startswith-方法：" class="headerlink" title="（1）startswith()方法："></a>（1）startswith()方法：</h5><pre><code class="hljs">#作用：检测字符串是否以某个子串开头，如果是，返回True，否则返回False。#函数格式：startswith(子串，开始位置下标，结束位置下标) 可以在指定范围内查找。#注意：开始和结束位置下标可以省略，表示在整个字符串中查找st =&#39;sixstar&#39;print(st. startswith(&#39;six&#39;))   #Trueprint(st. startswith(&#39;sex&#39;))   #Falseprint(st. startswith(&#39;s&#39;,2,6)) #False</code></pre><h5 id="（2）endswith-方法："><a href="#（2）endswith-方法：" class="headerlink" title="（2）endswith()方法："></a>（2）endswith()方法：</h5><pre><code class="hljs"># 与starswith()用法很类似。# 作用：检测字符串是否以某个子串结尾，如果是，返回True，否则返回False。# 函数格式：endswith(子串，开始位置下标，结束位置下标) 可以在指定范围内查找。# st =&#39;sixstar&#39;# print(st.endswith(&#39;er&#39;)) # False......</code></pre><h5 id="（3）isupper-方法："><a href="#（3）isupper-方法：" class="headerlink" title="（3）isupper()方法："></a>（3）isupper()方法：</h5><pre><code class="hljs">#检测字符串中所有的字母是否都为大写，是的话就返回Truest =&#39;sixstar&#39;print(st. isupper())    # Falseprint(&#39;SIX&#39;.isupper())  # True</code></pre><h5 id="（4）其他"><a href="#（4）其他" class="headerlink" title="（4）其他"></a>（4）其他</h5><pre><code class="hljs"># isalpha()：检测字符串中是否包含字母，是的话就返回True# isdigit()：检测字符串中是否包含数字，是的话就返回True# isspace()：检测字符串中是否包含空格，是的话就返回True# islower()：检测字符串中是否包含小写字母，是的话就返回True# isupper()：检测字符串中是否包含大写字母，是的话就返回True# 等等，可以自行了解</code></pre><h3 id="3-列表-List"><a href="#3-列表-List" class="headerlink" title="3.列表 List"></a>3.列表 List</h3><h4 id="1-列表的定义"><a href="#1-列表的定义" class="headerlink" title="1.列表的定义"></a>1.列表的定义</h4><pre><code class="hljs">#与数组很类似，是处理一组有序项目的数据结构 #基本格式：#列表名=[元素1，元素2，元素3..]#注意：#所有元素放在[]内，元素与元素之间用，隔开#元素之间的数据类型可以各不相同li =[1,2,&#39;a&#39;,4]print(li,type(li)) #输出：[1, 2, &#39;a&#39;, 4] &lt;class &#39;list&#39;&gt;print(li[2])       #输出：a</code></pre><h4 id="2-列表的常见操作"><a href="#2-列表的常见操作" class="headerlink" title="2.列表的常见操作"></a>2.列表的常见操作</h4><h5 id="（1）切片和遍历"><a href="#（1）切片和遍历" class="headerlink" title="（1）切片和遍历"></a>（1）切片和遍历</h5><pre><code class="hljs"># 列表也可以进行切片操作# print(1i[0:3])# 列表是可迭代对象，可以for循环遍历取值例如：for i in li:    print(i) #这里不需要i+1。</code></pre><h5 id="（2）添加元素"><a href="#（2）添加元素" class="headerlink" title="（2）添加元素"></a>（2）添加元素</h5><pre><code class="hljs"># 有三种方式#append ()  extend()  insert()li = [&#39;one&#39;,&#39;two&#39;,&#39;three&#39;]# li. append (&quot;four&quot;) #append整体添加，将‘four’添加到列表末尾。# li. extend(&#39;four&#39;)  #extend分散添加，将另外一个类型中的元素逐一添加,将‘f’，‘o’，‘u’，‘r’分散添加到列表末尾。1i.insert(3,&#39;four&#39;)   #在指定位置插入元素1i.insert(0,&#39;four&#39;)   #指定位置如果有元素，原有元素就会后移，输出为[&#39;four&#39;,&#39;one&#39;，&#39;two&#39;，&#39;three&#39;]。li.insert(&quot;four&quot;)     #报错，没有指定下标注意：extend方法添加的元素必须是可迭代对象，不可为整型，浮点型等。</code></pre><h5 id="（3）修改元素"><a href="#（3）修改元素" class="headerlink" title="（3）修改元素"></a>（3）修改元素</h5><pre><code class="hljs"># 列表中的元素可以直接修改# 直接通过下标就可以修改元素的值，与c语言修改方式基本一致# python列表中的元素可以是不同类型。</code></pre><h5 id="（4）查找元素"><a href="#（4）查找元素" class="headerlink" title="（4）查找元素"></a>（4）查找元素</h5><pre><code class="hljs">#in：判断指定元素是否存在列表中，如果存在就返回True，不存在就返回False#not in：判断指定元素是否存在列表中，如果不存在就返回True，存在就返回Falseli =[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]  #和在字符串中的查找基本一致print(&#39;b&#39; not in li)例子：与if判断搭配使用#定义一个列表，保存已经存在的昵称while True:    name_list = [&#39;bingbing&#39;, &#39;susu&#39;, &#39;zivi&#39; ]    name=input(&quot;请输入您的昵称：&quot;)    #判断昵称是否已经存在    if name in name_list:        print(f&quot;您输入的昵称&#123;name&#125;已经存在了哦&quot;)    #如果昵称不存在    else:        print(f&quot;昵称&#123;name&#125;已经添加到列表中&quot;)        #把昵称新增到列表        name_list.append (name)        print(name_list)        break#index：返回指定数据所在位置的下标，如果查找的数据不存在就会报错#count：统计指定数据在当前列表出现的次数#跟字符串中的用法相同</code></pre><h5 id="（5）删除元素"><a href="#（5）删除元素" class="headerlink" title="（5）删除元素"></a>（5）删除元素</h5><pre><code class="hljs">#有三种方式若li=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]1.del：删除指定位置的元素。del li          #表示删除整个列表，此时打印这个表会报错。del li[2]       #根据下标删除，表示删除下标为2的元素，打印输出为[&#39;a&#39;, &#39;b&#39;, &#39;d&#39;]。2.pop()：删除指定下标的数据，python3版本默认删除最后一个元素。li.pop()        #默认删除最后一个元素，打印输出为[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]。1i.pop(2)       #不能指定元素删除，只能根据下标进行删除，下标不能超出范围。3.remove()：根据指定元素的值删除元素，如果元素不存在，则会报错。li.remove(&#39;c&#39;)  #根据元素值删除元素，打印输出为[&#39;a&#39;, &#39;b&#39;, &#39;d&#39;]。1i.remove(&#39;t&#39;)  #报错，列表中不存在这个元素。1i.remove(&#39;b&#39;)  #如果列表中有多个同一元素，默认删除最开始出现的指定元素。</code></pre><h5 id="（6）列表的排序"><a href="#（6）列表的排序" class="headerlink" title="（6）列表的排序"></a>（6）列表的排序</h5><pre><code class="hljs">若li = [1, 4, 2, 5, 3]1.sort()：对列表进行排序，默认是从小到大排序，也可以指定参数reverse=True进行降序排序。li.sort()               #默认排序，打印输出为[1, 2, 3, 4, 5]。li.sort(reverse=True)   #降序排序，打印输出为[5, 4, 3, 2, 1]。2.sorted()：对列表进行排序，并返回一个新的列表，不影响原有列表。li_sorted = sorted(li)  #对li进行排序，并返回一个新的列表，打印输出为[1, 2, 3, 4, 5]。li_sorted = sorted(li,reverse=True)  #对li进行降序排序，并返回一个新的列表，打印输出为[5, 4, 3, 2, 1]。3.reverse()：对列表进行反转，即将列表中的元素顺序颠倒。li.reverse()     #打印输出为[3,5,2,4,1]。</code></pre><h5 id="（7）列表推导式"><a href="#（7）列表推导式" class="headerlink" title="（7）列表推导式"></a>（7）列表推导式</h5><pre><code class="hljs">#格式一：[表达式 for 变量 in 列表]#注意：in后面不仅可以放列表，还可以放range（）、可迭代对象#1i=[1,2,3,4,5,6]#[print（i*5）for i in li]  #循环打印，前面的i是表达式1i=[]#for i in range(1,6):#   print(i)#   1i. append (i)#print(li)[1i.append(i) for i in range(1,6)] #循环添加的简写，与上式是等效的。print(li)#输出：[1, 2, 3, 4, 5]</code></pre><h5 id="（8）列表嵌套"><a href="#（8）列表嵌套" class="headerlink" title="（8）列表嵌套"></a>（8）列表嵌套</h5><pre><code class="hljs">#列表中可以包含其他列表，即列表可以嵌套。下标引用类似c语言的二维数组。#格式：#列表名=[元素1，元素2，元素3..]#其中元素1、元素2、元素3...可以是列表，也可以是其他数据类型。#例如：li = [1, 2, [3, 4, 5], 6]print(li[2][1])  #输出：4print(li[2])     #输出：[3, 4, 5]#如果是多个列表嵌套，则多加几个中括号来进行下标引用。</code></pre><h3 id="4-元组-Tuple"><a href="#4-元组-Tuple" class="headerlink" title="4.元组 Tuple"></a>4.元组 Tuple</h3><h4 id="（1）元组的定义方式"><a href="#（1）元组的定义方式" class="headerlink" title="（1）元组的定义方式"></a>（1）元组的定义方式</h4><pre><code class="hljs">#元组与列表类似，也是一组有序项目的数据结构。#基本格式：#元组名=(元素1，元素2，元素3..)tup = ()#定义一个空元组</code></pre><h4 id="（2）元组的特点"><a href="#（2）元组的特点" class="headerlink" title="（2）元组的特点"></a>（2）元组的特点</h4><pre><code class="hljs">#所有元素放在()内，元素与元素之间用，隔开。#元组同样可以通过下标查询。#元组内只有一个元素时，需要在该元素后面添加逗号，否则不会被当作元组类型，而是返回这个唯一值的数据类型。#元组只支持查询操作，是不可变的，一旦创建就不能修改。（与列表可以增删改不同）#对于切片，count，index，find，in，not in，len等操作，元组同样适用。#数据不可被修改，保护数据安全。</code></pre><h4 id="（3）元组的应用场景"><a href="#（3）元组的应用场景" class="headerlink" title="（3）元组的应用场景"></a>（3）元组的应用场景</h4><pre><code class="hljs">#元组的应用场景主要是用来存储少量、不可变的数据，比如函数的参数和返回值，或者作为字典的键值。#格式化输出后面本质上就是一个元组。#例子：name =&#39;bingbing&#39;age = 18print(&quot;%s的年龄是:%d&quot; % (name,age))info = (name,age)             #info本质上是个将name和age组合的元组print(type(info))             #输出：&lt;class &#39;tuple&#39;&gt;print(&quot;%s的年龄是:%d&quot; % info)  #输出：bingbing的年龄是:18</code></pre><h3 id="5-字典-Dictionary"><a href="#5-字典-Dictionary" class="headerlink" title="5.字典 Dictionary"></a>5.字典 Dictionary</h3><h4 id="（1）字典的定义方式"><a href="#（1）字典的定义方式" class="headerlink" title="（1）字典的定义方式"></a>（1）字典的定义方式</h4><pre><code class="hljs">#字典是另一种可变容器模型，它是一组键值对（key-value）的集合。#字典的每个键值对用冒号分割，每个键值对之间用逗号隔开。#基本格式：#字典名=&#123;键1:值1，键2:值2，键3:值3..&#125;#注意：#字典中的键具有唯一性，值可以重复。#字典是无序的，即元素的顺序与插入的顺序不一致。#字典可以通过键来访问值，键可以是数字、字符串、元组等。#字典的键值对可以动态添加、删除。</code></pre><h5 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h5><pre><code class="hljs">dict = &#123;&#39;name&#39;:&#39;bingbing&#39;,&#39;age&#39;:18&#125;print(dict[&#39;name&#39;])     #输出：bingbingprint(dict[&#39;age&#39;])      #输出：18#dict[&#39;gender&#39;]=&#39;male&#39;  #添加键值对#del dict[&#39;age&#39;]        #删除键值对</code></pre><h5 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h5><pre><code class="hljs">dic2 = &#123;’ name&#39;&#39;bingbing”,’name’:susu&#39;&#125; #不会报错，键名重复前面的值会被后面的值覆print(dic2)</code></pre><h4 id="（2）字典的常用操作"><a href="#（2）字典的常用操作" class="headerlink" title="（2）字典的常用操作"></a>（2）字典的常用操作</h4><h5 id="1-查看元素"><a href="#1-查看元素" class="headerlink" title="1.查看元素"></a>1.查看元素</h5><pre><code class="hljs">1.字典名[键名]或者字典名.get(键名)：根据键获取值，如果键不存在，则返回None。dic = &#123;&#39;name&#39;:bingbing&#39;, &#39;age&#39;:18&#125;#例如：#字典名[键名]#dic = &#123;&#39;name&#39;:bingbing&#39;, &#39;age&#39;:18&#125;#print(dic[2])          #不可以根据下标，字典中没有下标，查找元素需要根据键名，键名相当于下标#print(dic[’age&#39;])      #18#print(dic[’sex’])      #报错，键名不存在#字典名.get(键名)dic = &#123;&#39;name&#39;:&#39;bingbing&#39;, &#39;age&#39;:18&#125;print (dic.get(&#39; name&#39;))          # bingbingprint (dic.get(&quot;tel&quot;))            # None键名不存在，返回Noneprint (dic.get(&quot;tel&quot;,&#39;不存在&#39;))   #不存在一-如果没有这个键名，返回自己设置的默认值2.items()：返回字典所有键值对组成的列表，键值对以元组的形式结合在一起。  #例如：#dic.items() #输出：[(&#39;name&#39;, &#39;bingbing&#39;), (&#39;age&#39;, 18)]3.keys()：返回字典所有键组成的列表。#例如：#dic.keys() #输出：[&#39;name&#39;, &#39;age&#39;]4.values()：返回字典所有值组成的列表。#例如：#dic.values() #输出：[&#39;bingbing&#39;, 18]5.len()：返回字典的长度，即键值对的个数。#例如：#len(dic) #输出：2</code></pre><h5 id="2-修改元素"><a href="#2-修改元素" class="headerlink" title="2.修改元素"></a>2.修改元素</h5><pre><code class="hljs">1.字典名[键名]=新的值：如果键名已存在，就修改对应键的值；如果键名不存在，就添加新的键值对。#例如：dic = &#123;&#39;name&#39;:&#39;bingbing&#39;, &#39;age&#39;:18&#125;#已存在dic[&#39;age&#39;] = 20print(dic)   #输出：&#123;&#39;name&#39;: &#39;bingbing&#39;, &#39;age&#39;: 20&#125;#不存在dic[&#39;sex&#39;] = &#39;男&#39;print(dic)   #输出：&#123;&#39;name&#39;: &#39;bingbing&#39;, &#39;age&#39;: 18,&#39;sex&#39;: &#39;男&#39;&#125;</code></pre><h5 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3.删除元素"></a>3.删除元素</h5><pre><code class="hljs">1.del #例如：#删除整个字典,del + 字典名dic = &#123;&#39;name&#39;:&#39;bingbing&#39;,&#39;age&#39;:18&#125;del dicprint(dic)      #报错，字典dic已删除。#删除指定键值对dic = &#123;&#39;name&#39;:&#39;bingbing&#39;,&#39;age&#39;:18&#125;del dic[&#39;age&#39;]  #若键值对不存在，则报错。print(dic)      #输出：&#123;&#39;name&#39;: &#39;bingbing&#39;&#125;2.clear()：清空字典，删除所有键值对，但是保留字典本身。#例如：dic = &#123;&#39;name&#39;:&#39;bingbing&#39;,&#39;age&#39;:18&#125;dic.clear()print(dic)      #输出：&#123;&#125;3.pop()：#删除指定键值对，并返回对应的值。#dic. popitem()        #py3.7之前的版本是随机删除一个键值对，3.7之后的版本默认删除最后一个键值对。#例如：dic = &#123;&#39;name&#39;:&#39;bingbing&#39;,&#39;age&#39;:18&#125;value = dic.pop(&#39;age&#39;) #储存返回的值，也可以不储存，像del一样直接删除元素。                       #如果键名不存在，同样报错print(value)           #输出：18print(dic)             #输出：&#123;&#39;name&#39;: &#39;bingbing&#39;&#125;</code></pre><h5 id="4-字典的应用场景"><a href="#4-字典的应用场景" class="headerlink" title="4.字典的应用场景"></a>4.字典的应用场景</h5><pre><code class="hljs">#字典的应用场景主要是用来存储大量、可变的数据，比如用户信息、商品信息、配置信息等。#储存描述一个事物的相关信息。</code></pre><h3 id="6-集合-Set"><a href="#6-集合-Set" class="headerlink" title="6.集合 Set"></a>6.集合 Set</h3><h4 id="（1）集合的定义方式"><a href="#（1）集合的定义方式" class="headerlink" title="（1）集合的定义方式"></a>（1）集合的定义方式</h4><pre><code class="hljs">#基本格式：#集合名=&#123;元素1，元素2，元素3..&#125; #类似字典用花括号，但没有键值对。#如果要定义一个空集合，则可以用set()函数。s1 = set()#如果使用&#123;&#125;定义一个空集合，则会默认是字典类型。s1 = &#123;&#125; </code></pre><h4 id="（2）集合的性质"><a href="#（2）集合的性质" class="headerlink" title="（2）集合的性质"></a>（2）集合的性质</h4><pre><code class="hljs">#集合是一组无序且唯一的元素的集合。 #集合中的元素必须是不可变的，即不能修改元素的值，只能添加或删除元素。#集合的元素可以是数字、字符串、元组等。#集合的元素不能重复，如果重复，则只会保留一个。#集合的元素是无序的，不能通过下标访问。#可以利用无序性给列表和元组去重。#集合打印的特殊情况s1=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;&#125;print(s1)     #字母每次运行结果都不一样s2 = &#123;1, 2, 3, 4, 5, 6&#125;print(s2)     #数字每次运行结果一样#原因是：集合无序的实现方式涉及hash表（了解即可）:  #利用hash函数来设计伪随机# print (hash(&#39;a&#39;))# print (hash(&#39;b&#39;))# print (hash(&#39;c&#39;))#每次运行结果都不同，hash值不同，那么在hash表中的位置也不同，这就实现了集合的无序性# print (hash(1))# print (hash(2))# print (hash(3))# python中int整型的hash值就是它本身，在hash表中的位置不会发生改变，所以顺序也不会gaibprint (hash(&#39;1&#39;))print (hash(&#39;2&#39;))print (hash(&#39;3&#39;))#用引号括起来整型变成了字符串类型，所以hash值还是会发生改变#无序性：不能修改集合中的值</code></pre><h4 id="（3）集合的常见操作"><a href="#（3）集合的常见操作" class="headerlink" title="（3）集合的常见操作"></a>（3）集合的常见操作</h4><h5 id="1-添加元素"><a href="#1-添加元素" class="headerlink" title="1.添加元素"></a>1.添加元素</h5><pre><code class="hljs">#add()：添加单个元素，如果元素已存在，则不添加。#update()：将传入的元素拆分成一个个无序添加到集合中，如果元素已存在，则不添加。#可以添加元组、列表、字典等组合元素。#例如：s1 = &#123;1, 2, 3&#125;s1.add(4)print(s1)             #输出：&#123;1, 2, 3, 4&#125;s1.add((5, 6, 7))     #输出：&#123;1, 2, 3, 4, (5, 6, 7)&#125;s1.update([5, 6, 7])  #括号内必须是可迭代对象，否则报错。print(s1)             #输出：&#123;1, 2, 3, 4, 5, 6, 7&#125;</code></pre><h5 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2.删除元素"></a>2.删除元素</h5><pre><code class="hljs">#remove()：删除指定元素，如果元素不存在，则报错。#discard()：也删除指定元素，区别在于如果元素不存在，则不报错。#pop()：默认删除根据hash表排序后的第一个元素，如果集合为空，则报错。#例如：s2 =&#123;1,2,3,4&#125;s2.remove(3)s2.remove(5)              #报错，集合中没有5这个元素print(&quot;删除后:&quot;,s2)        #输出：&#123;1, 2, 4&#125;s2.discard(5)             #不报错，集合中没有5这个元素，无视这段代码继续运行。print(&quot;删除后:&quot;,s2)        #输出：&#123;1, 2, 3, 4&#125;s2.pop()                  #随机删除一个元素print(&quot;删除后:&quot;,s2)        #输出： &#123;2, 3, 4&#125; ，对于整型集合，固定删除第一个元素。若s2 = &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;&#125;s2.pop()print(&quot;删除后:&quot;,s2)        #可能输出：&#123;&#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125; ，对于字符串集合，随机删除一个元素。</code></pre><h5 id="3-集合的运算"><a href="#3-集合的运算" class="headerlink" title="3.集合的运算"></a>3.集合的运算</h5><pre><code class="hljs">①union()：求两个集合的并集，即所有元素的集合。②intersection()：求两个集合的交集，即共同的元素的集合。若没有共有的部分就返回空集合set()。③difference()：求两个集合的差集，即只在第一个集合中的元素的集合。④symmetric_difference()：求两个集合的对称差集（异或），即不同时在两个集合中的元素的集合。#例如：s1 = &#123;1, 2, 3, 4&#125;s2 = &#123;3, 4, 5, 6&#125;print(s1.union(s2))         #输出：&#123;1, 2, 3, 4, 5, 6&#125;    等同于(s1 | s2)print(s1.intersection(s2))  #输出：&#123;3, 4&#125;                等同于(s1 &amp; s2)print(s1.difference(s2))    #输出：&#123;1, 2&#125;                等同于(s1 - s2)  print(s1.symmetric_difference(s2))  #输出：&#123;1, 2, 5, 6&#125;  等同于(s1 ^ s2)</code></pre><h3 id="7-类型与对象"><a href="#7-类型与对象" class="headerlink" title="7.类型与对象"></a>7.类型与对象</h3><h4 id="（1）类型转换"><a href="#（1）类型转换" class="headerlink" title="（1）类型转换"></a>（1）类型转换</h4><pre><code class="hljs">#类型转换是指将一种数据类型转换为另一种数据类型。</code></pre><h5 id="1-1int-：转换为一个整数，只能转换由纯数字组成的字符串"><a href="#1-1int-：转换为一个整数，只能转换由纯数字组成的字符串" class="headerlink" title="1.1int()：转换为一个整数，只能转换由纯数字组成的字符串"></a>1.1int()：转换为一个整数，只能转换由纯数字组成的字符串</h5><pre><code class="hljs"># float -&gt; int#a=1.2# print(type(a))#b = int(a)# print (b, type (b))# print(int(1.8))   #浮点型强转整型会去掉小数点及后面的数值，只保留整数部分# str -&gt; int#a = int(123&#39;)#print (a, type(a))print(int(&#39;bingbing&#39;))  #会报错，只能转换纯数字以及放在开头的正负号（+/-）。用途实例：input输入强制转换为整型age = int(input(&quot;请输入一个数字：&quot;))   #input的输入默认为字符串类型，一些情况下需要强制转换为整型。print(type(age))  #输出：&lt;class &#39;int&#39;&gt;if age &gt;= 18:    print(&quot;成年了&quot;)</code></pre><h5 id="1-2float-：转换为一个小数"><a href="#1-2float-：转换为一个小数" class="headerlink" title="1.2float()：转换为一个小数"></a>1.2float()：转换为一个小数</h5><pre><code class="hljs">#print(float(11))）     #整型转换为浮点型，会自动添加一位小数，输出：11.0#print(float(-11))#print(f1oat(&#39;+11.345&#39;))#print(float(&#39;10-&#39;))     #如果字符串中有正负号（放在最前面）、数字和小数点以外的字符，则不支持转换</code></pre><h5 id="1-3str-：转换为字符串类型"><a href="#1-3str-：转换为字符串类型" class="headerlink" title="1.3str()：转换为字符串类型"></a>1.3str()：转换为字符串类型</h5><pre><code class="hljs">#任何类型都可以转换为字符串类型，但转换后的字符串可能与原数据有所不同。#用str()来转换例子：#n=100# print(type(n)) #&lt;class ’int&#39;&gt;# n2 = str(n)# print(n2, type(n2))  # 100 &lt;class &#39;str&#39;&gt;# st = str(-1.80)# print (st,type(st))  # -1.8 float转换成str会至少保留一位小数，并去除末尾为0的小数部分。#列表、字典、元组都可以转换为字符串#以列表为例：li = [1,2,3,4,5]st = str(li)         # 相当于加了一个不可见的引号。print(st, type(st))  # [1, 2, 3, 4, 5] &lt;class&#39;str&#39;&gt;。</code></pre><h5 id="1-4eval-：将字符串转换为表达式并返回他的值"><a href="#1-4eval-：将字符串转换为表达式并返回他的值" class="headerlink" title="1.4eval()：将字符串转换为表达式并返回他的值"></a>1.4eval()：将字符串转换为表达式并返回他的值</h5><pre><code class="hljs">#注意一下几种写法的区别print(10+10)print(&#39;10&#39;+&#39;10′)print(&#39;10+10&#39;)print(eval(&#39;10+10&#39;))  #输出：20，效果类似于10+10的计算。print(eval(10+&#39;10&#39;))  #会报错，不支持整型和字符串相加。#eval()的用途：#执行字符串中的代码，并返回结果。#eval()可以实现列表list、字典dict、元组tuple与字符串str之间的转换。与str()的作用正好相反。如：# str-&gt; listst1 = &quot;[[1, 2], [3, 4], [5, 6]]&quot;print(type(st1))    # &lt;class&#39;str&#39;&gt;li = eval(st1)      # 字符串转列表，去引号print(li,type(li))  # [[1, 2], [3, 4], [5, 6]] &lt;class &#39;list&#39;&gt;注意：eval()的作用非常强大，但是不够安全，容易被恶意篡改数据，不建议使用。</code></pre><h5 id="1-5list-：将可迭代对象转换为列表类型"><a href="#1-5list-：将可迭代对象转换为列表类型" class="headerlink" title="1.5list()：将可迭代对象转换为列表类型"></a>1.5list()：将可迭代对象转换为列表类型</h5><pre><code class="hljs">#list()函数可以将元组tuple、字符串str、字典dict、集合set等可迭代对象转换为列表类型。#用list()来转换##### str-&gt;listst = &#39;abcdefg&#39;li = list(st)        # 将字符串拆分成单个字符，作为列表元素。print(li, type(li))  # [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;] &lt;class &#39;list&#39;&gt;  ##### dict-&gt;listdic = &#123;&#39;name&#39;: &#39;bingbing&#39;, &#39;age&#39;: 18&#125;li = list(dic)        # 字典转列表，每个键名作为一个元素，丢弃了键值。print(li, type(li))   # [&#39;name&#39;, &#39;bingbing&#39;]  &lt;class &#39;list&#39;&gt;##### set-&gt;lists = &#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&#125;li = list(s)          # 集合转列表，会先去重再转化，转化后的顺序是无序的。##### tuple-&gt;listtup = (1, 2, 3, 4, 5)li = list(tup)        # 元组转列表，每个元素作为一个元素，与str转list相同。</code></pre><h4 id="（2）深浅拷贝"><a href="#（2）深浅拷贝" class="headerlink" title="（2）深浅拷贝"></a>（2）深浅拷贝</h4>]]></content>
    
    
    
    <tags>
      
      <tag>代码/python/学习记录/进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言复习计划</title>
    <link href="/2025/03/25/draft/"/>
    <url>/2025/03/25/draft/</url>
    
    <content type="html"><![CDATA[<p>从大一上完c语言后就很久没回顾代码，手敲代码的能力也有所下降，因此打算从头复习一下基础知识。</p><h1 id="一、复习计划"><a href="#一、复习计划" class="headerlink" title="一、复习计划"></a>一、复习计划</h1><p>首先就是接着往下看看鹏哥的网课，然后再回头看看之前别人在csdn上写的博客，看看有哪些知识点还没复习，然后再根据复习计划进行复习。<br>再是要着重新学一些指针细节和宏的用法以及内存管理。</p><h1 id="二、复习内容"><a href="#二、复习内容" class="headerlink" title="二、复习内容"></a>二、复习内容</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>变量类型</li><li>运算符</li><li>控制语句</li><li>函数</li><li>数组</li><li>指针</li><li>结构体</li><li>枚举</li><li>宏</li><li>预处理器</li><li>内存管理</li><li>异常处理</li><li>多线程</li><li>网络编程</li><li>数据库</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码/C语言/规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/23/hello-world/"/>
    <url>/2025/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
