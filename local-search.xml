<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小八的python学习笔记</title>
    <link href="/2025/04/22/pythonlearn/"/>
    <url>/2025/04/22/pythonlearn/</url>
    
    <content type="html"><![CDATA[<h1 id="Python学习记录"><a href="#Python学习记录" class="headerlink" title="Python学习记录"></a>Python学习记录</h1><h2 id="一、python中出现错误原因"><a href="#一、python中出现错误原因" class="headerlink" title="一、python中出现错误原因"></a>一、python中出现错误原因</h2><h3 id="1-输入错误"><a href="#1-输入错误" class="headerlink" title="1.输入错误"></a>1.输入错误</h3><p>print（”123“）#报错，中文引号<br>#注意：python中的符号都是要用英文模式下的</p><h3 id="2-缩进错误"><a href="#2-缩进错误" class="headerlink" title="2.缩进错误"></a>2.缩进错误</h3><p>print(123)<br>#注意:print要顶格写，否则就报错</p><h3 id="3-语法错误"><a href="#3-语法错误" class="headerlink" title="3.语法错误"></a>3.语法错误</h3><p>print(123)print (456)<br>#两个print不能写在同一行，一个print必须单独写一行，错误信息中遇到Syntax说明语法有问题</p><h3 id="4-命名错误"><a href="#4-命名错误" class="headerlink" title="4.命名错误"></a>4.命名错误</h3><p>print(SixStar)#错误原因：SixStar是字母，那么就是字符串，必须要加上引号，单引号或者双引号都可以。或者Sixstar作为变量名，那么会输出变量值。</p><h2 id="二、python调试方法"><a href="#二、python调试方法" class="headerlink" title="二、python调试方法"></a>二、python调试方法</h2><h3 id="1-debug的调试"><a href="#1-debug的调试" class="headerlink" title="1.debug的调试"></a>1.debug的调试</h3><p>&#x2F;# debug中代码为蓝色时表示是即将要运行的代表<br>&#x2F;# Show Execution Point显示执行的断点<br>&#x2F;# Step Into下一步<br>&#x2F;# Run to Cursor跳到下一个断点的位置<br>&#x2F;# 总结：可以通过debug调试看到程序执行的顺序</p><h2 id="三、python变量"><a href="#三、python变量" class="headerlink" title="三、python变量"></a>三、python变量</h2><h3 id="1-变量的作用"><a href="#1-变量的作用" class="headerlink" title="1.变量的作用"></a>1.变量的作用</h3><p>#计算机中的存储空间，用于保存数据</p><h3 id="2-定义变量的格式"><a href="#2-定义变量的格式" class="headerlink" title="2.定义变量的格式"></a>2.定义变量的格式</h3><p>#变量名 &#x3D; 值<br>#注意：’&#x3D;’ 是赋值运算符，左右两边打上空格是为了代码的规范性，美观性。</p><h4 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h4><p>num1 &#x3D; 3 #numl就是一个变量，保存可乐的价格<br>num2 &#x3D; 10#num2也是一个变量，保存冰淇淋的价格<br>total &#x3D; num1 + num2#total也是一个变量，保存总价格<br>print (num1) #若num1未赋值，则会报错，提示未定义的变量<br>print (total) #输出结果：13<br>#加上引号会打印引号里面的内容，没有引号就会被识别成变量名，打印的是变量的值，如果该变量没有被赋值，就会报命名错误<br>#变量只有再赋值以后才会被创建，所以使用变量之前必须要赋值</p><h3 id="3-变量的命名规则"><a href="#3-变量的命名规则" class="headerlink" title="3.变量的命名规则"></a>3.变量的命名规则</h3><p>#变量名只能包含字母、数字和下划线，且不能以数字开头,严格区分大小写。<br>#变量名不能与关键字、系统保留字冲突<br>#变量名的长度没有限制，但最好不要超过20个字符，因为屏幕显示不下。<br>#Python中，变量没有类型，变量可以保存任意类型的数据。<br>#加上引号会打印引号里面的内容，没有引号就会被识别成变量名，打印的是变量的值，如果该变量没有被赋值，就会报命名错误。<br>#变量只有再赋值以后才会被创建，所以使用变量之前必须要赋值<br>#Python3可以用中文命名，但是不推荐，不符合代码的规范性<br>(username) &#x3D; 1<br>print ((username))#标识符被包含在()内对标识符本身没有影响</p><h3 id="4-变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）"><a href="#4-变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）" class="headerlink" title="4.变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）"></a>4.变量的命名规范（一种惯例，没有绝对性或强制性使用的说法，目的是为了增加代码的可读性）</h3><h4 id="1-见名知义"><a href="#1-见名知义" class="headerlink" title="1.见名知义"></a>1.见名知义</h4><p>#name &#x3D;”bingbing”</p><h4 id="2-下划线分割法：-python常用变量名命名规则"><a href="#2-下划线分割法：-python常用变量名命名规则" class="headerlink" title="2.下划线分割法：(python常用变量名命名规则)"></a>2.下划线分割法：(python常用变量名命名规则)</h4><p>#多个单词组成的名称，使用小写字母，单词与单词之间使用下划线分开。<br>#user_name &#x3D; ‘bingbing’</p><h4 id="3-大驼峰命名法："><a href="#3-大驼峰命名法：" class="headerlink" title="3.大驼峰命名法："></a>3.大驼峰命名法：</h4><p>#多个单词组成的名称，每个单词的首字母大写，其余字母小写。<br>#UserName &#x3D; “冰冰”<br>#SixStar &#x3D; 666</p><h4 id="4-小驼峰命名法："><a href="#4-小驼峰命名法：" class="headerlink" title="4.小驼峰命名法："></a>4.小驼峰命名法：</h4><p>#第一个单词首字母小写，后面单词首字母大写，其余字母小写。<br>#userName &#x3D; “bingbing”<br>#sixStar &#x3D; 666</p><h4 id="5-常量命名法："><a href="#5-常量命名法：" class="headerlink" title="5.常量命名法："></a>5.常量命名法：</h4><p>#全部字母大写，用下划线分割单词。<br>#PI &#x3D; 3.141592653589793</p><h2 id="四、python数据类型"><a href="#四、python数据类型" class="headerlink" title="四、python数据类型"></a>四、python数据类型</h2><h3 id="1-整型：int-（最常用）"><a href="#1-整型：int-（最常用）" class="headerlink" title="1.整型：int （最常用）"></a>1.整型：int （最常用）</h3><p>#整数类型，用于存储整数数据，包括正整数、负整数、0。</p><h3 id="2-浮点数类型：float"><a href="#2-浮点数类型：float" class="headerlink" title="2.浮点数类型：float"></a>2.浮点数类型：float</h3><p>#浮点数类型，用于存储小数数据，包括正数、负数、0、无限大。</p><h3 id="3-布尔类型：bool-（重要）通常用于判断"><a href="#3-布尔类型：bool-（重要）通常用于判断" class="headerlink" title="3.布尔类型：bool （重要）通常用于判断"></a>3.布尔类型：bool （重要）通常用于判断</h3><p>#布尔类型，一种真假的逻辑类型，有固定写法，不能随意赋值，用于存储布尔值，包括True、False（严格区分大小写）。<br>#布尔型可以当作整数对待，True&#x3D;1，False&#x3D;0。<br>#print (True + False)#1+0&#x3D;1<br>#print (True + 1)    #1+1&#x3D;2   </p><h3 id="4-复数类型：complex-（了解即可）"><a href="#4-复数类型：complex-（了解即可）" class="headerlink" title="4.复数类型：complex （了解即可）"></a>4.复数类型：complex （了解即可）</h3><p>#复数类型，用于存储复数数据，包括实数部分和虚数部分。<br>#拥有固定写法，z &#x3D; a + bj，其中a和b是实数部分，j是虚数单位（该单位只能是j，不能用其他字符）。<br>#print (type(2+3j))<br>#ma &#x3D;1+2i<br>#print(ma) #会报错，不能用其他字符做虚数单位<br>#ma1&#x3D;1+2j<br>#ma2&#x3D;2+3j<br>#print(ma1+ma2) #(1+2j)+(2+3j)&#x3D;3+5j</p><h3 id="5-字符串类型：str-比较常用"><a href="#5-字符串类型：str-比较常用" class="headerlink" title="5.字符串类型：str (比较常用)"></a>5.字符串类型：str (比较常用)</h3><h4 id="5-1特点"><a href="#5-1特点" class="headerlink" title="5.1特点"></a>5.1特点</h4><p>#需要加上引号，单引号和双引号都可以，包含了多行内容的时候也可以使用三引号<br>name &#x3D; sixstar #报错，没有引号识别成变量名，sixstar没有被赋值<br>name &#x3D; sixstar<br>name &#x3D; ‘sixstar’<br>name &#x3D; “sixstar”<br>name &#x3D; “””sixstar<br>哈哈”””         #要注意与三引号的多行注释区分开来（没有变量名），前者会被执行，后者不会被执行。</p><h4 id="5-2占位符"><a href="#5-2占位符" class="headerlink" title="5.2占位符"></a>5.2占位符</h4><p>#占位符的作用是生成一定格式的字符串，仅仅占据着该位置，但不会输出。<br>#占位符的三种方式：<br>1.%    （类似c语言的printf函数中的%d-&gt;整型、%f-&gt;浮点型、%s-&gt;字符串等）<br>用法举例：<br>name &#x3D;’bingbing’<br>print(“我的名字：%s” % name)<br>#注意：占位符只是占据位置，并不会被输出。</p><p>#%d整数（常用）<br>age &#x3D; 18<br>name&#x3D;’bingbing<br>print(“我的名字:%s，年龄：%d”%(name,age))<br>%d或%f可以用数字设置位数，不足前面补空白。<br>a&#x3D; 123<br>print(“%5d” % a) #表示输出的整数显示位数为5，不足的话用空格补全，超出当前位数则原样输出。<br>print(“%06d” % a)）#表示输出的整数显示位数，不足的话用0补全，超出当前位数则原样输出。</p><p>#%f浮点数（常用）<br>a &#x3D;1.2345673<br>print(“%f” % a)<br>#float型默认后6位小数，如果超出6位则遵循四舍五入原则。<br>print(“%.4f” % a) #表示输出的浮点数显示为4位小数，不足的话用0补全，超出当前位数则四舍五入。 </p><p>#%%<br>print(“我是%%的%%” % ()) #输出为：我是%的%</p><p>2.格式化f<br>#格式：f”{表达式}<br>name &#x3D; bingbing<br>age &#x3D; 18<br>print(f”我的名字是{name}，我今年{age}岁了”) #类似于f{x}类型的函数调用，将name和age看作为了变量。</p><h4 id="5-3占位符表"><a href="#5-3占位符表" class="headerlink" title="5.3占位符表"></a>5.3占位符表</h4><p>%c 格式化字符及其ASCII码<br>%s 格式化字符串<br>%d 格式化整数<br>%u 格式化无符号整型<br>%o 格式化无符号八进制数<br>%x 格式化无符号十六进制数<br>%X 格式化无符号十六进制数（大写）<br>%f 格式化浮点数字，可指定小数点后的精度<br>%e 用科学计数法格式化浮点数<br>%E 作用同%e，用科学计数法格式化浮点数<br>%g %f和%e的简写<br>%G %F和%E的简写<br>%p 用十六进制数格式化变量的地址</p><p>2.format ()<br>3.格式化f<br>#5.3f格式化<br>#格式：f”{表达式}<br>name &#x3D; bingbing<br>age &#x3D; 18<br>print(f”我的名字是{name}，我今年{age}岁了”)</p><p>#5.列表类型：list<br>#7.元组类型：tuple<br>#8.字典类型：dict<br>#9.集合类型：set<br>#10.None类型：None<br>#11.对象类型：object<br>#12.函数类型：function<br>#检测数据类型的方法：运用type()函数，print(type(num))。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码/python/学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言复习计划</title>
    <link href="/2025/03/25/draft/"/>
    <url>/2025/03/25/draft/</url>
    
    <content type="html"><![CDATA[<p>从大一上完c语言后就很久没回顾代码，手敲代码的能力也有所下降，因此打算从头复习一下基础知识。</p><h1 id="一、复习计划"><a href="#一、复习计划" class="headerlink" title="一、复习计划"></a>一、复习计划</h1><p>首先就是接着往下看看鹏哥的网课，然后再回头看看之前别人在csdn上写的博客，看看有哪些知识点还没复习，然后再根据复习计划进行复习。<br>再是要着重新学一些指针细节和宏的用法以及内存管理。</p><h1 id="二、复习内容"><a href="#二、复习内容" class="headerlink" title="二、复习内容"></a>二、复习内容</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>变量类型</li><li>运算符</li><li>控制语句</li><li>函数</li><li>数组</li><li>指针</li><li>结构体</li><li>枚举</li><li>宏</li><li>预处理器</li><li>内存管理</li><li>异常处理</li><li>多线程</li><li>网络编程</li><li>数据库</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码/C语言/规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/23/hello-world/"/>
    <url>/2025/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
